// Generated by CoffeeScript 1.12.7
var isComplexType, isInfrastructureType, nextId, unsupportedElements, uuid, validator,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

validator = require("./primitive-validator");

uuid = require("node-uuid");

nextId = 0;

isComplexType = function(fhirType) {
  return fhirType && fhirType[0] === fhirType[0].toUpperCase();
};

isInfrastructureType = function(fhirType) {
  return fhirType === "DomainResource" || fhirType === "Element" || fhirType === "BackboneElement";
};

unsupportedElements = [];

module.exports = {
  toFhir: function(decorated, validate) {
    var _walkNode, errCount, fhir;
    errCount = 0;
    _walkNode = function(node, parent) {
      var child, err, j, len, ref, ref1, ref2, ref3, ref4, value;
      if (parent == null) {
        parent = {};
      }
      ref = node.children;
      for (j = 0, len = ref.length; j < len; j++) {
        child = ref[j];
        value = (ref1 = child.nodeType) === "object" || ref1 === "arrayObject" ? _walkNode(child, {}) : (ref2 = child.nodeType) === "valueArray" || ref2 === "objectArray" ? _walkNode(child, []) : (validate && (child != null ? (ref3 = child.ui) != null ? ref3.validationErr : void 0 : void 0) ? err = child != null ? (ref4 = child.ui) != null ? ref4.validationErr : void 0 : void 0 : validate && child.fhirType ? err = validator.isValid(child.fhirType, child.value, true) : void 0, err ? errCount++ : void 0, child.value);
        if (parent instanceof Array) {
          parent.push(value);
        } else {
          parent[child.name] = value;
        }
      }
      return parent;
    };
    fhir = _walkNode(decorated);
    if (validate) {
      return [fhir, errCount];
    } else {
      return fhir;
    }
  },
  getElementChildren: function(profiles, schemaPath, excludePaths) {
    var _buildChild, _buildMultiTypePermutations, _isMultiType, children, level, name, path, ref, ref1, ref2, schema, schemaRoot, type;
    if (excludePaths == null) {
      excludePaths = [];
    }
    _buildChild = (function(_this) {
      return function(name, schema, typeCode) {
        return {
          schemaPath: schema.path,
          name: name,
          displayName: _this.buildDisplayName(schema.path.split("."), typeCode),
          index: schema.index,
          isRequired: schema.min >= 1,
          fhirType: typeCode,
          short: schema.short,
          range: [schema.min, schema.max],
          nodeType: isComplexType(typeCode) ? schema.max !== "1" ? "objectArray" : "object" : schema.max !== "1" ? "valueArray" : "value"
        };
      };
    })(this);
    _buildMultiTypePermutations = function(schema) {
      var capType, j, len, name, permutations, ref, type;
      permutations = [];
      ref = schema.type;
      for (j = 0, len = ref.length; j < len; j++) {
        type = ref[j];
        capType = type.code[0].toUpperCase() + type.code.slice(1);
        name = schema.path.split(".").pop().replace("[x]", capType);
        permutations.push(_buildChild(name, schema, type.code));
      }
      return permutations;
    };
    _isMultiType = function(schemaPath) {
      return path.indexOf("[x]") > -1;
    };
    children = [];
    schemaRoot = schemaPath.split(".").shift();
    level = schemaPath.split(".").length;
    ref = profiles[schemaRoot] || {};
    for (path in ref) {
      schema = ref[path];
      if (indexOf.call(excludePaths, path) >= 0 || path.indexOf(schemaPath) === -1 || path.split(".").length !== level + 1) {
        continue;
      }
      if (schema != null ? schema.nameReference : void 0) {
        schemaPath = schemaPath.split(".").shift() + "." + schema.nameReference;
      }
      if (_isMultiType(path)) {
        children = children.concat(_buildMultiTypePermutations(schema));
      } else {
        name = schema.path.split(".").pop();
        if (indexOf.call(unsupportedElements, name) < 0) {
          type = (schema != null ? (ref1 = schema.type) != null ? (ref2 = ref1[0]) != null ? ref2.code : void 0 : void 0 : void 0) || "BackboneElement";
          children.push(_buildChild(name, schema, type));
        }
      }
    }
    return children = children.sort(function(a, b) {
      return a.index - b.index;
    });
  },
  buildChildNode: function(profiles, parentNodeType, schemaPath, fhirType) {
    var _addRequiredChildren, capType, name, ref, result, schema;
    _addRequiredChildren = (function(_this) {
      return function(parentNodeType, schemaPath, fhirType) {
        var child, children, j, len, reqChildren;
        if (isComplexType(fhirType) && !isInfrastructureType(fhirType)) {
          schemaPath = fhirType;
        }
        children = _this.getElementChildren(profiles, schemaPath);
        reqChildren = [];
        for (j = 0, len = children.length; j < len; j++) {
          child = children[j];
          if (child.isRequired) {
            reqChildren.push(_this.buildChildNode(profiles, parentNodeType, child.schemaPath, child.fhirType));
          }
        }
        return reqChildren;
      };
    })(this);
    schemaPath = schemaPath.split(".");
    name = schemaPath[schemaPath.length - 1];
    schema = (ref = profiles[schemaPath[0]]) != null ? ref[schemaPath.join(".")] : void 0;
    if (schema != null ? schema.nameReference : void 0) {
      schemaPath = [schemaPath[0], schema.nameReference];
    }
    if (name.indexOf("[x]") > -1) {
      capType = fhirType[0].toUpperCase() + fhirType.slice(1);
      name = schema.path.split(".").pop().replace("[x]", capType);
    }
    if (schema.max !== "1" && (parentNodeType !== "valueArray" && parentNodeType !== "objectArray")) {
      return {
        id: nextId++,
        name: name,
        index: schema.index,
        schemaPath: schemaPath.join("."),
        fhirType: fhirType,
        displayName: this.buildDisplayName(schemaPath, fhirType),
        nodeType: isComplexType(fhirType) ? "objectArray" : "valueArray",
        short: schema.short,
        nodeCreator: "user",
        isRequired: schema.min >= 1,
        range: [schema.min, schema.max],
        children: isComplexType(fhirType) ? [this.buildChildNode(profiles, "objectArray", schemaPath.join("."), fhirType)] : [this.buildChildNode(profiles, "valueArray", schemaPath.join("."), fhirType)]
      };
    } else {
      result = {
        id: nextId++,
        name: name,
        index: schema.index,
        schemaPath: schemaPath.join("."),
        fhirType: fhirType,
        displayName: this.buildDisplayName(schemaPath, fhirType),
        isRequired: schema.min >= 1,
        short: schema.short,
        nodeCreator: "user",
        value: fhirType === "boolean" ? true : null,
        range: [schema.min, schema.max],
        binding: schema != null ? schema.binding : void 0,
        nodeType: isComplexType(fhirType) && parentNodeType === "objectArray" ? "arrayObject" : isComplexType(fhirType) ? "object" : "value"
      };
      if (isComplexType(fhirType)) {
        result.children = _addRequiredChildren(result.nodeType, result.schemaPath, result.fhirType);
      }
      return result;
    }
  },
  buildDisplayName: function(schemaPath, fhirType) {
    var _fixCamelCase, name;
    _fixCamelCase = function(text, lowerCase) {
      if (!lowerCase) {
        text = text[0].toUpperCase() + text.slice(1);
      }
      return text;
    };
    name = schemaPath[schemaPath.length - 1];
    if (name.indexOf("[x]") > -1) {
      return _fixCamelCase(name.replace(/\[x\]/, "")) + " (" + _fixCamelCase(fhirType, true) + ")";
    } else {
      return _fixCamelCase(name);
    }
  },
  isResource: function(profiles, data) {
    if (data.resourceType && profiles[data.resourceType]) {
      return true;
    }
  },
  decorateFhirData: function(profiles, data) {
    var _walkNode;
    nextId = 0;
    _walkNode = (function(_this) {
      return function(dataNode, schemaPath, level, inArray) {
        var decorated, displayName, error, fhirType, i, j, k, len, name, namePart, nameParts, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, refSchema, resourceType, schema, testSchema, testSchemaPath, v;
        if (level == null) {
          level = 0;
        }
        if (resourceType = dataNode.resourceType) {
          schemaPath = [resourceType];
        }
        name = schemaPath[schemaPath.length - 1];
        displayName = _this.buildDisplayName(schemaPath, null);
        schema = (ref = profiles[schemaPath[0]]) != null ? ref[schemaPath.join(".")] : void 0;
        fhirType = schema != null ? (ref1 = schema.type) != null ? (ref2 = ref1[0]) != null ? ref2.code : void 0 : void 0 : void 0;
        if (isInfrastructureType(fhirType) && schemaPath.length === 1) {
          fhirType = schemaPath[0];
        }
        if (schema != null ? schema.refSchema : void 0) {
          schemaPath = schema.refSchema.split(".");
          refSchema = (ref3 = profiles[schemaPath[0]]) != null ? ref3[schemaPath.join(".")] : void 0;
          fhirType = refSchema != null ? (ref4 = refSchema.type) != null ? (ref5 = ref4[0]) != null ? ref5.code : void 0 : void 0 : void 0;
        }
        if (!fhirType) {
          nameParts = schemaPath[schemaPath.length - 1].split(/(?=[A-Z])/);
          testSchemaPath = schemaPath.slice(0, schemaPath.length - 1).join(".") + ".";
          for (i = j = 0, len = nameParts.length; j < len; i = ++j) {
            namePart = nameParts[i];
            testSchemaPath += "" + namePart;
            if (testSchema = (ref6 = profiles[schemaPath[0]]) != null ? ref6[testSchemaPath + "[x]"] : void 0) {
              schema = testSchema;
              schemaPath = testSchema.path.split(".");
              fhirType = nameParts.slice(i + 1).join("");
              if (!profiles[fhirType]) {
                fhirType = fhirType[0].toLowerCase() + fhirType.slice(1);
              }
              displayName = _this.buildDisplayName(schemaPath, fhirType);
            }
          }
        }
        decorated = {
          id: nextId++,
          index: (schema != null ? schema.index : void 0) || 0,
          name: name,
          nodeType: "value",
          displayName: displayName,
          schemaPath: schemaPath.join("."),
          fhirType: fhirType,
          level: level,
          short: schema != null ? schema.short : void 0,
          isRequired: (schema != null ? schema.min : void 0) && schema.min >= 1,
          binding: schema != null ? schema.binding : void 0
        };
        if ((schema != null ? schema.min : void 0) !== void 0) {
          decorated.range = [schema != null ? schema.min : void 0, schema != null ? schema.max : void 0];
        }
        if (name === "resourceType") {
          decorated.hidden = true;
        }
        if (isComplexType(fhirType) && !isInfrastructureType(fhirType)) {
          schemaPath = [fhirType];
        }
        if (fhirType === "Attachment" && dataNode.contentType && dataNode.data) {
          decorated.contentType = dataNode.contentType;
        }
        if (dataNode instanceof Array && decorated.range && decorated.range[1] !== "1") {
          decorated.children = (function() {
            var l, len1, results;
            results = [];
            for (i = l = 0, len1 = dataNode.length; l < len1; i = ++l) {
              v = dataNode[i];
              results.push(_walkNode(v, schemaPath, level + 1, true));
            }
            return results;
          })();
          decorated.nodeType = fhirType && isComplexType(fhirType) ? "objectArray" : !fhirType && typeof (dataNode != null ? dataNode[0] : void 0) === "object" ? "objectArray" : "valueArray";
        } else if (typeof dataNode === "object" && !(dataNode instanceof Array) && !(dataNode instanceof Date)) {
          decorated.nodeType = schema && schema.max !== "1" ? "arrayObject" : "object";
          decorated.children = (function() {
            var results;
            results = [];
            for (k in dataNode) {
              v = dataNode[k];
              results.push(_walkNode(v, schemaPath.concat(k), level + 1));
            }
            return results;
          })();
          decorated.children = decorated.children.sort(function(a, b) {
            return a.index - b.index;
          });
        } else {
          if (fhirType === "decimal" && dataNode !== "") {
            dataNode = parseFloat(dataNode).toString();
            if (dataNode.indexOf(".") === -1) {
              dataNode += ".0";
            }
          }
          decorated.value = dataNode;
          if (((ref7 = decorated.range) != null ? ref7[1] : void 0) && decorated.range[1] !== "1" && !inArray) {
            decorated.fhirType = null;
          }
          if (dataNode instanceof Array && ((ref8 = decorated.range) != null ? ref8[1] : void 0) === "1") {
            decorated.fhirType = null;
          }
          if (fhirType && (error = validator.isValid(fhirType, dataNode))) {
            decorated.ui = {
              validationErr: error,
              status: "editing"
            };
          }
        }
        return decorated;
      };
    })(this);
    return _walkNode(data);
  }
};
