// Generated by CoffeeScript 1.12.7
var React, ReactDOM, State, ValueEditor, validator,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

React = require("react");

ReactDOM = require("react-dom");

State = require("../state");

validator = require("../helpers/primitive-validator");

ValueEditor = (function(superClass) {
  extend(ValueEditor, superClass);

  function ValueEditor() {
    return ValueEditor.__super__.constructor.apply(this, arguments);
  }

  ValueEditor.prototype.displayName = "ValueEditor";

  ValueEditor.prototype.ESC_KEY = 27;

  ValueEditor.prototype.ENTER_KEY = 13;

  ValueEditor.prototype.TAB_KEY = 9;

  ValueEditor.prototype.shouldComponentUpdate = function(nextProps) {
    return nextProps.node !== this.props.node;
  };

  ValueEditor.prototype.componentDidMount = function() {
    var domNode, newValue, ref, ref1, reference, vs;
    if (this.props.hasFocus && this.refs.inputField) {
      domNode = this.refs.inputField;
      domNode.focus();
      if (domNode.setSelectionRange) {
        domNode.setSelectionRange(domNode.value.length, domNode.value.length);
      }
    }
    if (this.props.node.fhirType === "xhtml") {
      if (this.props.node.value) {
        newValue = this.props.node.value.replace(/^\s*[\r\n]/gm, "");
        State.trigger("value_change", this.props.node, newValue);
      }
    }
    if (this.props.node.fhirType === "code" && ((ref = this.props.node) != null ? (ref1 = ref.binding) != null ? ref1.strength : void 0 : void 0) === "required") {
      reference = this.props.node.binding.reference;
      vs = State.get().valuesets[reference];
      if (vs.type === "complete") {
        return State.trigger("value_change", this.props.node, this.refs.inputField.value);
      }
    }
  };

  ValueEditor.prototype.handleChange = function(e) {
    var i, isInvalid, j, len, ref, resource, resources;
    isInvalid = this.isValid(this.props.node.fhirType, e.target.value);
    if (!isInvalid && this.props.node.fhirType === "id" && this.props.node.level === 1 && (resources = (ref = State.get().bundle) != null ? ref.resources : void 0)) {
      for (i = j = 0, len = resources.length; j < len; i = ++j) {
        resource = resources[i];
        if (resource.id === e.target.value && i !== State.get().bundle.pos) {
          isInvalid = "This id is already used in the bundle.";
        }
      }
    }
    return State.trigger("value_change", this.props.node, e.target.value, isInvalid);
  };

  ValueEditor.prototype.handleKeyDown = function(e) {
    var newValue;
    if (e.which === this.ESC_KEY) {
      return this.props.onEditCancel(e);
    } else if (e.which === this.ENTER_KEY && e.target.type === "text") {
      return this.props.onEditCommit(e);
    } else if (e.which === this.TAB_KEY && this.props.node.fhirType === "xhtml") {
      e.preventDefault();
      newValue = e.target.value.substring(0, e.target.selectionStart) + "\t" + e.target.value.substring(e.target.selectionEnd);
      return e.target.value = newValue;
    }
  };

  ValueEditor.prototype.isValid = function(fhirType, value) {
    return validator.isValid(fhirType, value);
  };

  ValueEditor.prototype.renderString = function(value) {
    var inputField;
    inputField = this.buildTextInput((value || "").toString());
    return this.wrapEditControls(inputField);
  };

  ValueEditor.prototype.renderCode = function(value) {
    var inputField, ref, ref1, reference, vs;
    if (((ref = this.props.node) != null ? (ref1 = ref.binding) != null ? ref1.strength : void 0 : void 0) === "required") {
      reference = this.props.node.binding.reference;
      vs = State.get().valuesets[reference];
      if (vs.type === "complete") {
        inputField = this.buildCodeInput(value, vs.items);
      }
    }
    inputField || (inputField = this.buildTextInput(value || ""));
    return this.wrapEditControls(inputField);
  };

  ValueEditor.prototype.renderLongString = function(value) {
    var inputField;
    inputField = this.buildTextAreaInput((value || "").toString());
    return this.wrapEditControls(inputField);
  };

  ValueEditor.prototype.renderBoolean = function(value) {
    var inputField;
    inputField = this.buildDropdownInput(value);
    return this.wrapEditControls(inputField);
  };

  ValueEditor.prototype.buildDropdownInput = function(value) {
    return React.createElement("span", null, React.createElement("select", {
      "value": this.props.node.value,
      "className": "form-control input-sm",
      "onChange": this.handleChange.bind(this),
      "ref": "inputField"
    }, React.createElement("option", {
      "value": true
    }, "Yes"), React.createElement("option", {
      "value": false
    }, "No")));
  };

  ValueEditor.prototype.buildCodeInput = function(value, items) {
    var i, item, j, len, options;
    options = [];
    for (i = j = 0, len = items.length; j < len; i = ++j) {
      item = items[i];
      options.push(React.createElement("option", {
        "key": item[1],
        "value": item[1]
      }, item[0], " (", item[1], ")"));
    }
    return React.createElement("span", null, React.createElement("select", {
      "value": this.props.node.value || "",
      "className": "form-control input-sm",
      "onChange": this.handleChange.bind(this),
      "ref": "inputField"
    }, options));
  };

  ValueEditor.prototype.buildTextAreaInput = function(value) {
    var xhtmlClass;
    if (this.props.node.fhirType === "xhtml") {
      xhtmlClass = " fhir-xhtml-edit";
    }
    return React.createElement("textarea", {
      "ref": "inputField",
      "className": "form-control input-sm" + (xhtmlClass || ""),
      "onChange": this.handleChange.bind(this),
      "onKeyDown": this.handleKeyDown.bind(this),
      "value": value
    });
  };

  ValueEditor.prototype.buildTextInput = function(value) {
    return React.createElement("input", {
      "ref": "inputField",
      "className": "form-control input-sm",
      "value": value,
      "onChange": this.handleChange.bind(this),
      "onKeyDown": this.handleKeyDown.bind(this)
    });
  };

  ValueEditor.prototype.buildCommitButton = function() {
    var commitButtonClassName, ref, ref1, ref2, ref3;
    commitButtonClassName = "btn btn-default btn-sm";
    if (((ref = this.props.node.value) === null || ref === (void 0) || ref === "") || ((ref1 = this.props) != null ? (ref2 = ref1.node) != null ? (ref3 = ref2.ui) != null ? ref3.validationErr : void 0 : void 0 : void 0)) {
      commitButtonClassName += " disabled";
    }
    return React.createElement("button", {
      "type": "button",
      "className": commitButtonClassName,
      "onClick": this.props.onEditCommit
    }, React.createElement("span", {
      "className": "glyphicon glyphicon-ok"
    }));
  };

  ValueEditor.prototype.buildDeleteButton = function(disabled) {
    return React.createElement("button", {
      "type": "button",
      "className": "btn btn-default btn-sm",
      "onClick": this.props.onNodeDelete,
      "disabled": disabled
    }, React.createElement("span", {
      "className": "glyphicon glyphicon-trash"
    }));
  };

  ValueEditor.prototype.wrapEditControls = function(inputField, disableDelete) {
    var commitButton, groupClassName, ref, ref1, ref2, validationErr, validationHint;
    groupClassName = "input-group";
    if (validationErr = (ref = this.props) != null ? (ref1 = ref.node) != null ? (ref2 = ref1.ui) != null ? ref2.validationErr : void 0 : void 0 : void 0) {
      groupClassName += " has-error";
      validationHint = React.createElement("div", {
        "className": "help-block"
      }, validationErr);
    }
    if (this.props.parent.nodeType === "valueArray") {
      groupClassName += " fhir-value-array-input";
    }
    if (this.props.parent.nodeType !== "valueArray") {
      commitButton = this.buildCommitButton();
    }
    return React.createElement("div", null, React.createElement("div", {
      "className": groupClassName
    }, inputField, React.createElement("span", {
      "className": "input-group-btn"
    }, commitButton, this.buildDeleteButton(disableDelete || this.props.required))), React.createElement("div", {
      "className": (validationErr ? "has-error" : void 0)
    }, validationHint));
  };

  ValueEditor.prototype.render = function() {
    var renderer, renderers, value;
    renderers = {
      decimal: this.renderDecimal,
      boolean: this.renderBoolean,
      xhtml: this.renderLongString,
      base64Binary: this.renderLongString,
      code: this.renderCode
    };
    renderer = renderers[this.props.node.fhirType || "string"] || this.renderString;
    value = this.props.node.value;
    return renderer.call(this, value);
  };

  return ValueEditor;

})(React.Component);

module.exports = ValueEditor;
