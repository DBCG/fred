// Generated by CoffeeScript 1.12.7
var React, State, ValueArrayNode, ValueDisplay, ValueEditor,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

React = require("react");

State = require("../state");

ValueDisplay = require("./value-display");

ValueEditor = require("./value-editor");

ValueArrayNode = (function(superClass) {
  extend(ValueArrayNode, superClass);

  function ValueArrayNode() {
    return ValueArrayNode.__super__.constructor.apply(this, arguments);
  }

  ValueArrayNode.prototype.displayName = "ValueArrayNode";

  ValueArrayNode.prototype.shouldComponentUpdate = function(nextProps) {
    return nextProps.node !== this.props.node;
  };

  ValueArrayNode.prototype.handleItemAdd = function(e) {
    State.trigger("add_array_value", this.props.node);
    if (e) {
      return e.preventDefault();
    }
  };

  ValueArrayNode.prototype.handleItemDelete = function(child, e) {
    if (this.props.node.children.length === 1) {
      this.props.onNodeDelete();
    } else {
      State.trigger("delete_node", child, this.props.node);
    }
    return e.preventDefault();
  };

  ValueArrayNode.prototype.componentWillMount = function() {
    var ref, ref1;
    if (this.props.node.children.length === 0 && ((ref = this.props.node) != null ? (ref1 = ref.ui) != null ? ref1.status : void 0 : void 0) !== "editing") {
      return this.props.onEditStart();
    }
  };

  ValueArrayNode.prototype.componentDidUpdate = function() {
    var ref, ref1;
    if (((ref = this.props.node) != null ? (ref1 = ref.ui) != null ? ref1.status : void 0 : void 0) === "editing" && this.props.node.children.length === 0) {
      return this.handleItemAdd();
    }
  };

  ValueArrayNode.prototype.renderEditing = function() {
    var child, children, i, j, len, ref, required;
    children = [];
    ref = this.props.node.children;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      child = ref[i];
      children.push(React.createElement(ValueEditor, {
        "key": i,
        "hasFocus": i === this.props.node.children.length - 1,
        "node": child,
        "parent": this.props.node,
        "onEditCommit": this.props.onEditCommit,
        "onNodeDelete": this.handleItemDelete.bind(this, child),
        "onEditCancel": this.props.onEditCancel,
        "required": this.props.node.isRequired && this.props.node.children.length === 1
      }));
    }
    required = this.props.node.isRequired ? "*" : void 0;
    return React.createElement("div", {
      "className": "row fhir-data-element"
    }, React.createElement("div", {
      "className": "col-sm-3 fhir-data-title"
    }, this.props.node.displayName, " ", React.createElement("span", {
      "className": "fhir-data-type"
    }, "(", this.props.node.fhirType, ")"), ":"), React.createElement("div", {
      "className": "col-sm-9 fhir-data-content"
    }, React.createElement("div", {
      "className": "fhir-short-desc"
    }, this.props.node.short, required), children, React.createElement("div", {
      "className": "btn-toolbar",
      "role": "group",
      "style": {
        marginTop: "6px"
      }
    }, React.createElement("button", {
      "type": "button",
      "className": "btn btn-default btn-sm",
      "onClick": this.handleItemAdd.bind(this)
    }, React.createElement("span", {
      "className": "glyphicon glyphicon-plus"
    })), React.createElement("button", {
      "type": "button",
      "className": "btn btn-default btn-sm",
      "onClick": this.props.onEditCommit
    }, React.createElement("span", {
      "className": "glyphicon glyphicon-ok"
    })))));
  };

  ValueArrayNode.prototype.renderDisplay = function() {
    var child, children, i, j, len, ref, required;
    required = this.props.node.isRequired ? "*" : void 0;
    children = [];
    ref = this.props.node.children;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      child = ref[i];
      children.push(React.createElement(ValueDisplay, {
        "key": i,
        "node": child,
        "parent": this.props.node
      }));
    }
    return React.createElement("div", {
      "className": "row fhir-data-element fhir-data-unknown",
      "onClick": this.props.onEditStart
    }, React.createElement("div", {
      "className": "col-sm-3 fhir-data-title"
    }, this.props.node.displayName, required, ":"), React.createElement("div", {
      "className": "col-sm-9 fhir-data-content"
    }, children));
  };

  ValueArrayNode.prototype.render = function() {
    var ref, ref1;
    if (((ref = this.props.node) != null ? (ref1 = ref.ui) != null ? ref1.status : void 0 : void 0) === "editing") {
      return this.renderEditing();
    } else {
      return this.renderDisplay();
    }
  };

  return ValueArrayNode;

})(React.Component);

module.exports = ValueArrayNode;
