// Generated by CoffeeScript 1.12.7
var Dropdown, ElementMenu, MenuItem, React, State, ref,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

React = require("react");

State = require("../state");

ref = require("react-bootstrap"), Dropdown = ref.Dropdown, MenuItem = ref.MenuItem;

ElementMenu = (function(superClass) {
  extend(ElementMenu, superClass);

  function ElementMenu() {
    return ElementMenu.__super__.constructor.apply(this, arguments);
  }

  ElementMenu.prototype.shouldComponentUpdate = function(nextProps) {
    var ref1, ref2, ref3, ref4;
    return ((ref1 = nextProps.node) != null ? (ref2 = ref1.ui) != null ? ref2.menu : void 0 : void 0) !== ((ref3 = this.props.node) != null ? (ref4 = ref3.ui) != null ? ref4.menu : void 0 : void 0);
  };

  ElementMenu.prototype.handleToggle = function(show) {
    if (show) {
      return State.trigger("show_object_menu", this.props.node, this.props.parent);
    }
  };

  ElementMenu.prototype.handleAddItem = function(unused) {
    return State.trigger("add_object_element", this.props.node, unused);
  };

  ElementMenu.prototype.handleAddObject = function(e) {
    State.trigger("add_array_object", this.props.node);
    return e.preventDefault();
  };

  ElementMenu.prototype.handleMove = function(down, e) {
    State.trigger("move_array_node", this.props.node, this.props.parent, down);
    return e.preventDefault;
  };

  ElementMenu.prototype.handleDeleteItem = function(e) {
    State.trigger("delete_node", this.props.node, this.props.parent);
    return e.preventDefault();
  };

  ElementMenu.prototype.preventDefault = function(e) {
    return e.preventDefault();
  };

  ElementMenu.prototype.render = function() {
    return React.createElement(Dropdown, {
      "id": "element-menu",
      "onToggle": this.handleToggle.bind(this)
    }, this.renderToggle(), this.renderMenu());
  };

  ElementMenu.prototype.renderToggle = function() {
    var className, title;
    if (this.props.display === "inline") {
      className = "inline-menu-toggle";
      title = this.props.node.displayName;
    } else if (this.props.display === "heading") {
      className = "heading-menu-toggle";
      title = this.props.parent.displayName;
    }
    return React.createElement(Dropdown.Toggle, {
      "className": className,
      "bsSize": "small",
      "title": title || "Add Element"
    });
  };

  ElementMenu.prototype.renderPlaceholder = function() {
    return React.createElement(Dropdown.Menu, null, React.createElement(MenuItem, null, "Loading..."));
  };

  ElementMenu.prototype.renderMenu = function() {
    var addObject, header, i, moveDown, moveUp, ref1, ref2, ref3, remove, required, spacer1, spacer2, unused, unusedElements;
    if (((ref1 = this.props.node) != null ? (ref2 = ref1.ui) != null ? ref2.status : void 0 : void 0) !== "menu") {
      return this.renderPlaceholder();
    }
    addObject = this.props.node.nodeType === "objectArray" ? React.createElement(MenuItem, {
      "onSelect": this.handleAddObject.bind(this)
    }, "Add ", this.props.node.displayName) : void 0;
    moveUp = this.props.node.ui.menu.canMoveUp ? React.createElement(MenuItem, {
      "onSelect": this.handleMove.bind(this, false)
    }, "Move Up") : void 0;
    moveDown = this.props.node.ui.menu.canMoveDown ? React.createElement(MenuItem, {
      "onSelect": this.handleMove.bind(this, true)
    }, "Move Down") : void 0;
    unusedElements = (function() {
      var j, len, ref3, results;
      ref3 = this.props.node.ui.menu.unusedElements || [];
      results = [];
      for (i = j = 0, len = ref3.length; j < len; i = ++j) {
        unused = ref3[i];
        required = unused.isRequired ? "*" : "";
        results.push(React.createElement(MenuItem, {
          "key": i,
          "onSelect": this.handleAddItem.bind(this, unused)
        }, unused.displayName + (required || "")));
      }
      return results;
    }).call(this);
    remove = this.props.parent ? React.createElement(MenuItem, {
      "onSelect": this.handleDeleteItem.bind(this)
    }, "Remove") : void 0;
    spacer1 = addObject || remove ? React.createElement(MenuItem, {
      "divider": true
    }) : void 0;
    spacer2 = (moveUp || moveDown) && (unusedElements != null ? unusedElements.length : void 0) > 0 ? React.createElement(MenuItem, {
      "divider": true
    }) : void 0;
    header = (unusedElements != null ? unusedElements.length : void 0) > 0 && this.props.parent ? React.createElement(MenuItem, {
      "header": true
    }, "Add Item") : void 0;
    if (((ref3 = this.props.node) != null ? ref3.fhirType : void 0) === "Resource") {
      header = unusedElements = spacer1 = spacer2 = null;
    }
    return React.createElement(Dropdown.Menu, null, remove, addObject, spacer1, moveUp, moveDown, spacer2, header, unusedElements);
  };

  return ElementMenu;

})(React.Component);

module.exports = ElementMenu;
