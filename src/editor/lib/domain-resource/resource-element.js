// Generated by CoffeeScript 1.12.7
var ElementMenu, React, ReactDOM, ResourceElement, State, ValueArrayNode, ValueDisplay, ValueEditor, ValueNode, validator,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

React = require("react");

ReactDOM = require("react-dom");

State = require("../state");

validator = require("../helpers/primitive-validator");

ValueEditor = require("./value-editor");

ValueDisplay = require("./value-display");

ValueNode = require("./value-node");

ValueArrayNode = require("./value-array-node");

ElementMenu = require("./element-menu");

ResourceElement = (function(superClass) {
  extend(ResourceElement, superClass);

  function ResourceElement() {
    return ResourceElement.__super__.constructor.apply(this, arguments);
  }

  ResourceElement.prototype.displayName = "ResourceElement";

  ResourceElement.prototype.isValid = function(node) {
    var editNode, i, len, message, ref, ref1;
    ref = node.children || [node];
    for (i = 0, len = ref.length; i < len; i++) {
      editNode = ref[i];
      if ((ref1 = node.ui) != null ? ref1.validationErr : void 0) {
        return false;
      }
      if (message = validator.isValid(editNode.fhirType, editNode.value, true)) {
        State.trigger("value_change", editNode, editNode.value, message);
        return false;
      }
    }
    return true;
  };

  ResourceElement.prototype.shouldComponentUpdate = function(nextProps) {
    return nextProps.node !== this.props.node;
  };

  ResourceElement.prototype.componentDidMount = function() {
    var domNode, ref, scrollY;
    if (this.refs.complexElement && ((ref = this.props.node) != null ? ref.nodeCreator : void 0) === "user") {
      domNode = ReactDOM.findDOMNode(this.refs.complexElement);
      domNode.scrollIntoView(true);
      scrollY = window.scrollY;
      if (scrollY) {
        return window.scroll(0, scrollY - 60);
      }
    }
  };

  ResourceElement.prototype.handleEditStart = function(e) {
    State.trigger("start_edit", this.props.node);
    if (e) {
      return e.preventDefault();
    }
  };

  ResourceElement.prototype.handleEditCancel = function(e) {
    var ref, ref1, ref2, ref3;
    if ((ref = (ref1 = this.props.node) != null ? (ref2 = ref1.ui) != null ? (ref3 = ref2.prevState) != null ? ref3.value : void 0 : void 0 : void 0) === null || ref === (void 0) || ref === "") {
      return;
    }
    State.trigger("cancel_edit", this.props.node);
    if (e) {
      return e.preventDefault();
    }
  };

  ResourceElement.prototype.handleEditCommit = function(e) {
    if (!this.isValid(this.props.node)) {
      return;
    }
    State.trigger("end_edit", this.props.node, this.props.parent);
    if (e) {
      return e.preventDefault();
    }
  };

  ResourceElement.prototype.handleNodeDelete = function(e) {
    State.trigger("delete_node", this.props.node, this.props.parent);
    if (e) {
      return e.preventDefault();
    }
  };

  ResourceElement.prototype.handleAddContained = function(e) {
    State.trigger("show_open_contained", this.props.node);
    if (e) {
      return e.preventDefault();
    }
  };

  ResourceElement.prototype.handleObjectMenu = function(e) {
    var ref, ref1;
    if (((ref = this.props.node) != null ? (ref1 = ref.ui) != null ? ref1.status : void 0 : void 0) === "menu") {
      return;
    }
    State.trigger("show_object_menu", this.props.node, this.props.parent);
    if (e) {
      return e.preventDefault();
    }
  };

  ResourceElement.prototype.renderChildren = function() {
    var child, children, i, len, ref;
    children = [];
    ref = this.props.node.children;
    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      children.push(React.createElement(ResourceElement, {
        "key": child.id,
        "node": child,
        "parent": this.props.node
      }));
    }
    return children;
  };

  ResourceElement.prototype.render = function() {
    if (this.props.node.nodeType === "value" || !this.props.node.fhirType) {
      return React.createElement(ValueNode, {
        "node": this.props.node,
        "parent": this.props.parent,
        "onEditStart": this.handleEditStart.bind(this),
        "onEditCommit": this.handleEditCommit.bind(this),
        "onEditCancel": this.handleEditCancel.bind(this),
        "onNodeDelete": this.handleNodeDelete.bind(this)
      });
    } else if (this.props.node.nodeType === "valueArray") {
      return React.createElement(ValueArrayNode, {
        "node": this.props.node,
        "parent": this.props.parent,
        "onEditStart": this.handleEditStart.bind(this),
        "onEditCommit": this.handleEditCommit.bind(this),
        "onEditCancel": this.handleEditCancel.bind(this),
        "onNodeDelete": this.handleNodeDelete.bind(this)
      });
    } else if (this.props.node.nodeType === "objectArray") {
      return React.createElement("div", {
        "className": "fhir-data-element row",
        "ref": "complexElement"
      }, React.createElement("div", {
        "className": "col-sm-12"
      }, this.renderChildren()));
    } else if (this.props.node.fhirType === "Resource") {
      return React.createElement("div", {
        "className": "fhir-array-complex-wrap",
        "ref": "complexElement"
      }, React.createElement(ElementMenu, {
        "node": this.props.node,
        "parent": this.props.parent,
        "display": "heading"
      }), React.createElement("div", {
        "className": "fhir-array-complex text-center"
      }, React.createElement("button", {
        "className": "btn btn-primary",
        "onClick": this.handleAddContained.bind(this)
      }, "\t\t\t\t\t\t\tChoose Resource")));
    } else if (this.props.node.nodeType === "arrayObject") {
      return React.createElement("div", {
        "className": "fhir-array-complex-wrap",
        "ref": "complexElement"
      }, React.createElement(ElementMenu, {
        "node": this.props.node,
        "parent": this.props.parent,
        "display": "heading"
      }), React.createElement("div", {
        "className": "fhir-array-complex"
      }, this.renderChildren()));
    } else if (this.props.node.nodeType === "object") {
      return React.createElement("div", {
        "className": "fhir-data-element row",
        "ref": "complexElement"
      }, React.createElement("div", {
        "className": "col-sm-3"
      }, React.createElement(ElementMenu, {
        "node": this.props.node,
        "parent": this.props.parent,
        "display": "inline"
      })), React.createElement("div", {
        "className": "col-sm-9"
      }, this.renderChildren()));
    }
  };

  return ResourceElement;

})(React.Component);

module.exports = ResourceElement;
