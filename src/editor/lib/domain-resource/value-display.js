// Generated by CoffeeScript 1.12.7
var React, State, ValueDisplay, moment, sanitize,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

React = require("react");

moment = require("moment");

sanitize = require("sanitize-caja");

State = require("../state");

ValueDisplay = (function(superClass) {
  extend(ValueDisplay, superClass);

  function ValueDisplay() {
    return ValueDisplay.__super__.constructor.apply(this, arguments);
  }

  ValueDisplay.prototype.displayName = "ValueDisplay";

  ValueDisplay.prototype.maxTextLength = 40;

  ValueDisplay.prototype.shouldComponentUpdate = function(nextProps) {
    return nextProps.node !== this.props.node;
  };

  ValueDisplay.prototype.formatInstant = function(value) {
    return moment(value).parseZone(value).format("YYYY-MM-DD h:m:ss A ([GMT]Z)");
  };

  ValueDisplay.prototype.formatTime = function(value) {
    return moment(value, "HH:mm:ss.SSSS").format("h:m:ss A");
  };

  ValueDisplay.prototype.formatDate = function(value) {
    var dashCount, ref;
    dashCount = (ref = value.match(/\-/g)) != null ? ref.length : void 0;
    if (dashCount === 1) {
      return moment(value, "YYYY-MM").format("MMM YYYY");
    } else if (dashCount === 2) {
      return moment(value, "YYYY-MM-DD").format("MMM Do, YYYY");
    } else {
      return value;
    }
  };

  ValueDisplay.prototype.formatDateTime = function(value) {
    var dashCount, hasTime, ref;
    dashCount = (ref = value.match(/\-/g)) != null ? ref.length : void 0;
    hasTime = value.indexOf(":") > -1;
    if (dashCount === 2 && hasTime) {
      return this.formatInstant(value);
    } else {
      return this.formatDate(value);
    }
  };

  ValueDisplay.prototype.formatString = function(value) {
    return value.substr(0, 400);
  };

  ValueDisplay.prototype.formatBoolean = function(value) {
    if (value === true || value === "true") {
      return "Yes";
    } else {
      return "No";
    }
  };

  ValueDisplay.prototype.formatCode = function(value) {
    var code, display, i, invalid, len, ref, ref1, ref2, ref3, reference, vs;
    if ((ref = this.props.node) != null ? (ref1 = ref.binding) != null ? ref1.strength : void 0 : void 0) {
      if (this.props.node.binding.strength === "required") {
        invalid = true;
      }
      reference = this.props.node.binding.reference;
      vs = State.get().valuesets[reference];
      if (vs != null) {
        ref2 = vs.items;
        for (i = 0, len = ref2.length; i < len; i++) {
          ref3 = ref2[i], display = ref3[0], code = ref3[1];
          if (code === value) {
            invalid = false;
            value = display;
            break;
          }
        }
      } else {
        invalid = true;
      }
    }
    value = this.formatString(value);
    if (invalid) {
      return React.createElement("span", {
        "className": "fhir-invalid-code"
      }, value, " [invalid code]");
    } else {
      return value;
    }
  };

  ValueDisplay.prototype.formatXhtml = function(value) {
    return React.createElement("div", null, React.createElement("div", {
      "className": "fhir-xhtml",
      "dangerouslySetInnerHTML": {
        __html: sanitize(value)
      }
    }), React.createElement("div", {
      "className": "small text-right",
      "onClick": this.handleXhtmlPopup.bind(this)
    }, React.createElement("a", {
      "href": "#"
    }, "view in new window")));
  };

  ValueDisplay.prototype.handleXhtmlPopup = function(e) {
    var win;
    e.preventDefault();
    e.stopPropagation();
    win = window.open("", "XHTML Preview");
    return win.document.body.innerHTML = "<html><head>\n<link href='narrative.css' rel='stylesheet'>\n<link href='normalize.css' rel='stylesheet'>\n</head><body> \n" + this.props.node.value + "\n</body></html>";
  };

  ValueDisplay.prototype.formatInt = function(value) {
    return parseInt(value).toString();
  };

  ValueDisplay.prototype.formatBlob = function(value, contentType) {
    var dataUri;
    if (contentType === "image/jpeg" || contentType === "image/png" || contentType === "image/gif") {
      dataUri = "data:" + contentType + ";base64," + value;
      return React.createElement("img", {
        "src": dataUri
      });
    } else {
      return this.formatString(value);
    }
  };

  ValueDisplay.prototype.formatDecimal = function(value) {
    return value;
  };

  ValueDisplay.prototype.formatInt = function(value) {
    return value.toString();
  };

  ValueDisplay.prototype.formatBlank = function() {
    return React.createElement("span", {
      "className": "empty-value"
    }, "...");
  };

  ValueDisplay.prototype.render = function() {
    var displayValue, formatter, formatters, value;
    formatters = {
      date: this.formatDate,
      time: this.formatTime,
      instant: this.formatInstant,
      dateTime: this.formatDateTime,
      integer: this.formatInt,
      unsignedInt: this.formatInt,
      positiveInt: this.formatInt,
      decimal: this.formatDecimal,
      boolean: this.formatBoolean,
      string: this.formatString,
      uri: this.formatString,
      oid: this.formatString,
      code: this.formatString,
      id: this.formatString,
      markdown: this.formatString,
      xhtml: this.formatXhtml
    };
    formatter = formatters[this.props.node.fhirType || "string"];
    value = this.props.node.value;
    if (this.props.node.fhirType === null) {
      value = value.toString();
    }
    displayValue = this.props.node.fhirType === "base64Binary" ? this.formatBlob(value, this.props.parent.contentType) : value !== null && value !== (void 0) && value !== "" ? formatter.call(this, value) : this.formatBlank();
    return React.createElement("span", {
      "className": "fhir-element-value"
    }, displayValue);
  };

  return ValueDisplay;

})(React.Component);

module.exports = ValueDisplay;
