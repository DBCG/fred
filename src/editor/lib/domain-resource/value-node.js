// Generated by CoffeeScript 1.12.7
var React, ValueDisplay, ValueEditor, ValueNode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

React = require("react");

ValueDisplay = require("./value-display");

ValueEditor = require("./value-editor");

ValueNode = (function(superClass) {
  extend(ValueNode, superClass);

  function ValueNode() {
    return ValueNode.__super__.constructor.apply(this, arguments);
  }

  ValueNode.prototype.displayName = "ValueNode";

  ValueNode.prototype.shouldComponentUpdate = function(nextProps) {
    return nextProps.node !== this.props.node;
  };

  ValueNode.prototype.componentWillMount = function() {
    var ref, ref1, ref2;
    if (((ref = this.props.node.value) === null || ref === (void 0) || ref === "") && ((ref1 = this.props.node) != null ? (ref2 = ref1.ui) != null ? ref2.status : void 0 : void 0) !== "editing") {
      return this.props.onEditStart();
    }
  };

  ValueNode.prototype.renderUnknown = function() {
    var content;
    content = this.props.node.value ? React.createElement(ValueDisplay, {
      "node": this.props.node,
      "parent": this.props.parent
    }) : React.createElement("span", null, "Unknown Elements");
    return React.createElement("div", {
      "className": "fhir-data-element fhir-element-unknown row"
    }, React.createElement("div", {
      "className": "col-sm-3 fhir-data-title"
    }, this.props.node.displayName, ":"), React.createElement("div", {
      "className": "col-sm-9 fhir-data-content"
    }, content));
  };

  ValueNode.prototype.renderXhtmlEditing = function() {
    var preview;
    preview = React.createElement("div", {
      "className": "col-sm-9 col-sm-offset-3 fhir-data-content",
      "style": {
        marginTop: "10px"
      }
    }, React.createElement(ValueDisplay, {
      "node": this.props.node,
      "parent": this.props.parent
    }));
    return this.renderEditing(preview);
  };

  ValueNode.prototype.renderEditing = function(preview) {
    var required;
    required = this.props.node.isRequired ? "*" : void 0;
    return React.createElement("div", {
      "className": "fhir-data-element row"
    }, React.createElement("div", {
      "className": "col-sm-3 fhir-data-title",
      "title": this.props.node.short
    }, this.props.node.displayName, required, " ", React.createElement("span", {
      "className": "fhir-data-type"
    }, "(", this.props.node.fhirType, ")"), ":"), React.createElement("div", {
      "className": "col-sm-9 fhir-data-content"
    }, React.createElement("div", {
      "className": "fhir-short-desc"
    }, this.props.node.short), React.createElement(ValueEditor, {
      "hasFocus": true,
      "node": this.props.node,
      "parent": this.props.parent,
      "required": this.props.node.isRequired,
      "onEditCommit": this.props.onEditCommit,
      "onNodeDelete": this.props.onNodeDelete,
      "onEditCancel": this.props.onEditCancel
    })), preview);
  };

  ValueNode.prototype.renderDisplay = function() {
    var required;
    required = this.props.node.isRequired ? "*" : void 0;
    return React.createElement("div", {
      "className": "fhir-data-element row",
      "onClick": this.props.onEditStart
    }, React.createElement("div", {
      "className": "col-sm-3 fhir-data-title",
      "title": this.props.node.short
    }, this.props.node.displayName, required, ":"), React.createElement("div", {
      "className": "col-sm-9 fhir-data-content"
    }, React.createElement(ValueDisplay, {
      "node": this.props.node,
      "parent": this.props.parent
    })));
  };

  ValueNode.prototype.renderPreview = function() {
    return React.createElement("div", null, "preview");
  };

  ValueNode.prototype.render = function() {
    var isEditing, ref, ref1;
    isEditing = ((ref = this.props.node) != null ? (ref1 = ref.ui) != null ? ref1.status : void 0 : void 0) === "editing";
    if (this.props.node.hidden) {
      return null;
    }
    if (!this.props.node.fhirType) {
      return this.renderUnknown();
    } else if (isEditing && this.props.node.fhirType === "xhtml") {
      return this.renderXhtmlEditing();
    } else if (isEditing) {
      return this.renderEditing();
    } else {
      return this.renderDisplay();
    }
  };

  return ValueNode;

})(React.Component);

module.exports = ValueNode;
